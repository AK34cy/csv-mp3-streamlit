import io
import pandas as pd
import streamlit as st
import bcrypt
from pydub.utils import which
from mp3_generator import build_merged_mp3

import db
from register import register_user

st.set_page_config(page_title="–°–ø–∏—Å–∫–∏ —Å–ª–æ–≤ ‚Üí MP3", page_icon="üéß", layout="centered")
st.title("üìö –°–ø–∏—Å–∫–∏ —Å–ª–æ–≤ ‚Üí –æ–±—â–∏–π MP3 (—Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏)")

# --- –ë–î (–∫—ç—à–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã) ---
@st.cache_resource(show_spinner=False)
def _get_conn():
    conn = db.get_conn()
    db.init_db(conn)
    return conn

conn = _get_conn()

# --- Session state –¥–ª—è auth ---
if "user" not in st.session_state:
    st.session_state.user = None

# --- –ë–ª–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
def show_auth():
    tabs = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])

    with tabs[0]:
        st.subheader("–í—Ö–æ–¥")
        email = st.text_input("Email", key="login_email")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="login_password")
        if st.button("–í–æ–π—Ç–∏", type="primary"):
            u = db.get_user_by_email(conn, (email or "").strip().lower())
            if not u:
                st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                ok = bcrypt.checkpw((password or "").encode("utf-8"), u["password_hash"].encode("utf-8"))
                if ok:
                    st.session_state.user = {"id": u["id"], "email": u["email"], "name": u.get("name")}
                    st.success("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                    st.experimental_rerun()
                else:
                    st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")

    with tabs[1]:
        st.subheader("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        r_email = st.text_input("Email", key="reg_email")
        r_name = st.text_input("–ò–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", key="reg_name")
        r_pwd = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="reg_pwd")
        r_pwd2 = st.text_input("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password", key="reg_pwd2")
        if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
            ok, msg, user = register_user(conn, r_email, r_name, r_pwd, r_pwd2)
            if ok:
                st.success(msg)
                st.info("–¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ ¬´–í—Ö–æ–¥¬ª.")
            else:
                st.error(msg)

if not st.session_state.user:
    show_auth()
    st.stop()

# --- Sidebar: –ø—Ä–æ—Ñ–∏–ª—å, –≤—ã—Ö–æ–¥, —Ñ–∞–π–ª—ã –∏–∑ –ë–î ---
with st.sidebar:
    st.markdown(f"**–ü—Ä–æ—Ñ–∏–ª—å:** {st.session_state.user['email']}")
    if st.button("–í—ã–π—Ç–∏"):
        st.session_state.clear()
        st.experimental_rerun()

    st.markdown("‚Äî")
    st.subheader("–ú–æ–∏ —Ñ–∞–π–ª—ã (–ë–î)")
    db_files = db.list_user_files(conn, st.session_state.user["id"], kind="csv")
    if db_files:
        options = {f"{r['filename']} ‚Ä¢ {r['created_at']:%Y-%m-%d %H:%M}": r["id"] for r in db_files}
        sel = st.selectbox("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ CSV", list(options.keys()))
        colA, colB = st.columns(2)
        with colA:
            if st.button("–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–µ—Å—Å–∏—é"):
                rec = db.get_file(conn, options[sel], st.session_state.user["id"])
                if rec and rec["kind"] == "csv":
                    buf = io.BytesIO(rec["data"])
                    df = (
                        pd.read_csv(buf, header=None)
                        .dropna(how="any")
                        .replace(r'^\s*$', pd.NA, regex=True)
                        .dropna(how="any")
                        .reset_index(drop=True)
                    )
                    st.session_state.setdefault("uploaded_files", {})
                    st.session_state.setdefault("selected_rows", {})
                    st.session_state.setdefault("current_file", None)
                    # —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º—è
                    base = rec["filename"]
                    name = base
                    i = 1
                    while name in st.session_state["uploaded_files"]:
                        name = f"{base} ({i})"
                        i += 1
                    st.session_state["uploaded_files"][name] = df
                    st.session_state["selected_rows"].setdefault(name, [])
                    st.session_state["current_file"] = name
                    st.success(f"–§–∞–π–ª '{name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é")
        with colB:
            if st.button("–°–∫–∞—á–∞—Ç—å"):
                rec = db.get_file(conn, options[sel], st.session_state.user["id"])
                if rec:
                    st.download_button(
                        "–°–∫–∞—á–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π CSV",
                        data=rec["data"],
                        file_name=rec["filename"],
                        mime="text/csv",
                    )

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
if "uploaded_files" not in st.session_state:
    st.session_state.uploaded_files = {}
if "selected_rows" not in st.session_state:
    st.session_state.selected_rows = {}
if "current_file" not in st.session_state:
    st.session_state.current_file = None

# --- –ó–∞–≥—Ä—É–∑–∫–∞ CSV (–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î) ---
uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)", type="csv")
if uploaded is not None:
    # 1) –°–æ—Ö—Ä–∞–Ω—è–µ–º –û–†–ò–ì–ò–ù–ê–õ –≤ –ë–î
    try:
        db.store_file(conn, st.session_state.user["id"], uploaded.name, uploaded.getvalue(), kind="csv")
        st.success("CSV —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î")
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î: {e}")

    # 2) –ì–æ—Ç–æ–≤–∏–º DataFrame –¥–ª—è —Å–µ—Å—Å–∏–∏ (–æ—á–∏—Å—Ç–∫–∞)
    df = (
        pd.read_csv(uploaded, header=None)
        .dropna(how="any")
        .replace(r'^\s*$', pd.NA, regex=True)
        .dropna(how="any")
        .reset_index(drop=True)
    )
    st.session_state.uploaded_files[uploaded.name] = df
    st.session_state.selected_rows.setdefault(uploaded.name, [])
    st.session_state.current_file = uploaded.name
    st.success(f"–§–∞–π–ª '{uploaded.name}' –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Å–µ—Å—Å–∏—é")

# --- –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –∏ —Ä–∞–±–æ—Ç–∞ —Å –Ω–∏–º ---
if st.session_state.uploaded_files:
    st.markdown('<p style="font-size:20px;"><b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:</b></p>', unsafe_allow_html=True)
    file_name = st.selectbox(
        "",
        list(st.session_state.uploaded_files.keys()),
        index=list(st.session_state.uploaded_files.keys()).index(
            st.session_state.current_file
        ) if st.session_state.current_file else 0
    )
    st.session_state.current_file = file_name
    df = st.session_state.uploaded_files[file_name]

    st.subheader("üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (—Å–µ—Å—Å–∏—è):")
    for fname in st.session_state.uploaded_files.keys():
        if fname == file_name:
            st.markdown(f"<span style='background-color:#a0e0ff;padding:2px 6px;'>{fname}</span>", unsafe_allow_html=True)
        else:
            st.markdown(fname)

    # --- –≤—ã–±–æ—Ä —Å—Ç—Ä–æ–∫ ---
    st.subheader(f"‚úÖ –í—ã–±–æ—Ä —Å—Ç—Ä–æ–∫ –∏–∑ '{file_name}'")
    top_key = f"select_all_top_{file_name}"
    bottom_key = f"select_all_bottom_{file_name}"

    def _sync_select_all(file_name_arg, which):
        top_k = f"select_all_top_{file_name_arg}"
        bot_k = f"select_all_bottom_{file_name_arg}"
        val = st.session_state.get(top_k) if which == "top" else st.session_state.get(bot_k)
        st.session_state[top_k] = val
        st.session_state[bot_k] = val
        for i in df.index:
            st.session_state[f"{file_name_arg}_{i}"] = val

    if top_key not in st.session_state:
        st.session_state[top_key] = False
    if bottom_key not in st.session_state:
        st.session_state[bottom_key] = False
    for i in df.index:
        k = f"{file_name}_{i}"
        if k not in st.session_state:
            st.session_state[k] = False

    st.checkbox("**‚úÖ –í–´–ë–†–ê–¢–¨ / –°–ù–Ø–¢–¨ –í–°–ï**", key=top_key, on_change=_sync_select_all, args=(file_name, "top"))

    new_selected = []
    for i, row in df.iterrows():
        row_text = " | ".join(str(x) for x in row if pd.notna(x))
        if st.checkbox(row_text, key=f"{file_name}_{i}"):
            new_selected.append(i)

    st.checkbox("**‚úÖ –í–´–ë–†–ê–¢–¨ / –°–ù–Ø–¢–¨ –í–°–ï**", key=bottom_key, on_change=_sync_select_all, args=(file_name, "bottom"))

    st.session_state.selected_rows[file_name] = new_selected
    st.write(f"–í—ã–±—Ä–∞–Ω–æ: {len(new_selected)} —Å—Ç—Ä–æ–∫")

    # --- –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–∞—É–∑–∞ –ü–ï–†–ï–î —Ä—É—Å—Å–∫–∏–º, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ) ---
    st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∑–≤—É—á–∫–∏")
    pause_sec = st.slider("–ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Ä—É—Å—Å–∫–∏–º —Å–ª–æ–≤–æ–º (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ), —Å–µ–∫", 0.0, 5.0, 0.5, 0.1)

    # --- –≥–µ–Ω–µ—Ä–∞—Ü–∏—è MP3 ---
    st.subheader("üéß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è")
    if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–π MP3"):
        if not new_selected:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É.")
        else:
            if which("ffmpeg") is None and which("ffmpeg.exe") is None:
                st.error("ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
            else:
                rows = df.loc[new_selected].astype(str).values.tolist()
                total = len(rows)
                progress_bar = st.progress(0)
                status = st.empty()

                def _cb(i):
                    pct = int((i + 1) / total * 100)
                    progress_bar.progress(pct)
                    status.text(f"üîä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è... {i+1}/{total}")

                try:
                    with st.spinner("–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∏ —Å–∫–ª–µ–π–∫–∞..."):
                        mp3_buf = build_merged_mp3(
                            rows=rows,
                            pause_ms=int(pause_sec * 1000),
                            ru_col=0,
                            ru_lang="ru",
                            de_lang="de",
                            progress_callback=_cb,
                        )

                    progress_bar.progress(100)
                    status.text("‚úÖ –ì–æ—Ç–æ–≤–æ!")
                    st.success("–ì–æ—Ç–æ–≤–æ!")
                    mp3_buf.seek(0)
                    mp3_bytes = mp3_buf.getvalue()

                    st.audio(mp3_bytes, format="audio/mpeg")

                    st.download_button(
                        "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ–±—â–∏–π MP3",
                        data=mp3_bytes,
                        file_name=f"{file_name.rsplit('.',1)[0]}_selected.mp3",
                        mime="audio/mpeg",
                    )

                    # –ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å MP3 –≤ –ë–î:
                    # db.store_file(conn, st.session_state.user["id"], f"{file_name}_selected.mp3", mp3_bytes, kind="mp3")

                    st.caption(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(mp3_bytes)/1024:.1f} KB")

                except Exception as e:
                    progress_bar.empty()
                    status.empty()
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

# --- —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å–µ—Å—Å–∏–∏ ---
if st.session_state.uploaded_files:
    st.divider()
    file_to_delete = st.selectbox("–£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–µ—Å—Å–∏–∏", list(st.session_state.uploaded_files.keys()))
    if st.button("–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–∑ —Å–µ—Å—Å–∏–∏"):
        st.session_state.uploaded_files.pop(file_to_delete, None)
        st.session_state.selected_rows.pop(file_to_delete, None)
        if st.session_state.current_file == file_to_delete:
            st.session_state.current_file = next(iter(st.session_state.uploaded_files), None)
        st.success(f"–§–∞–π–ª '{file_to_delete}' —É–¥–∞–ª—ë–Ω –∏–∑ —Å–µ—Å—Å–∏–∏")
