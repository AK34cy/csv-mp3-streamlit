# auth.py
import re
import bcrypt
import streamlit as st
from db import get_user_by_email, create_user

EMAIL_RE = re.compile(r"^[^@\s]+@[^@\s]+\.[^@\s]+$")

def login_block():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç user dict –∏–ª–∏ None –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    st.sidebar.subheader("üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    conn = st.session_state.conn

    if "user" not in st.session_state:
        st.session_state.user = None

    tab_login, tab_reg = st.sidebar.tabs(["–í–æ–π—Ç–∏", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])

    user = None
    with tab_login:
        email = st.text_input("Email", key="login_email")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="login_pwd")
        if st.button("–í–æ–π—Ç–∏"):
            if email and password:
                u = get_user_by_email(conn, email.strip().lower())
                if u and bcrypt.checkpw(password.encode("utf-8"), u["password_hash"].encode("utf-8")):
                    st.session_state.user = u
                    st.success(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {u.get('name') or u['email']}!")
                    st.experimental_rerun()
                else:
                    st.error("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    
    with tab_reg:
        email = st.text_input("Email", key="reg_email")
        name = st.text_input("–ò–º—è", key="reg_name")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="reg_pwd")
        password_repeat = st.text_input("–ü–æ–≤—Ç–æ—Ä –ø–∞—Ä–æ–ª—è", type="password", key="reg_pwd2")
        if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
            ok, msg, user = register_user(conn, email, name, password, password_repeat)
            if ok:
                st.session_state.user = user
                st.success(msg)
                st.experimental_rerun()
            else:
                st.error(msg)

    return st.session_state.user


def register_user(conn, email: str, name: str, password: str, password_repeat: str):
    email = (email or "").strip().lower()
    name = (name or "").strip()

    if not EMAIL_RE.match(email):
        return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email", None
    if len(password) < 6:
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 6 —Å–∏–º–≤–æ–ª–æ–≤", None
    if password != password_repeat:
        return False, "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç", None

    exists = get_user_by_email(conn, email)
    if exists:
        return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", None

    pwd_hash = bcrypt.hashpw(password.encode("utf-8"), bcrypt.gensalt()).decode("utf-8")
    user = create_user(conn, email=email, name=name, password_hash=pwd_hash)
    return True, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞", user
