import streamlit as st
from file_manager import upload_file, list_files, delete_file
from mp3_generator import build_merged_mp3


def render_file_upload(conn, user_id):
    """–ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
    st.subheader("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
    uploaded = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV/Excel", type=["csv", "xlsx", "xls"])
    if uploaded:
        ok, msg = upload_file(conn, user_id, uploaded)
        if ok:
            st.success(msg)
        else:
            st.error(msg)


def render_file_list(conn, user_id):
    """–ë–ª–æ–∫ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    st.subheader("üìë –ú–æ–∏ —Ñ–∞–π–ª—ã")
    files = list_files(conn, user_id)
    if not files:
        st.info("–§–∞–π–ª—ã –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return None

    selected = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:", [f["name"] for f in files])
    file_map = {f["name"]: f for f in files}

    if st.button("üóë –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª"):
        ok, msg = delete_file(conn, file_map[selected]["id"])
        if ok:
            st.success(msg)
            st.experimental_rerun()
        else:
            st.error(msg)

    return file_map[selected]


def render_mp3_generator(rows):
    """–ë–ª–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ MP3"""
    st.subheader("üéß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è MP3")
    if not rows:
        st.info("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
        return

    if st.button("‚ñ∂Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å MP3"):
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è..."):
            mp3_buf = build_merged_mp3(rows)
            st.audio(mp3_buf, format="audio/mp3")
            st.download_button("üíæ –°–∫–∞—á–∞—Ç—å MP3", data=mp3_buf, file_name="output.mp3")
