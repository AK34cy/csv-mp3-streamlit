# mp3_generator.py
import streamlit as st
import pandas as pd
from io import BytesIO
from db import get_file
from gtts import gTTS
from pydub import AudioSegment

def build_merged_mp3(df, pause_sec=0.5):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è MP3 –∏–∑ DataFrame —Å –ø–∞—É–∑–æ–π –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏.
    –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ —è–∑—ã–∫—É: —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ - ru, –Ω–µ–º–µ—Ü–∫–∏–µ - de.
    """
    mp3_combined = AudioSegment.silent(duration=0)
    n = len(df)
    progress_bar = st.progress(0)

    for i, row in enumerate(df.itertuples(index=False), 1):
        text = " ".join(str(x) for x in row if pd.notna(x))
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
        lang = 'ru' if any('–ê' <= c <= '—è' for c in text) else 'de'
        tts_buf = BytesIO()
        tts = gTTS(text=text, lang=lang)
        tts.write_to_fp(tts_buf)
        tts_buf.seek(0)
        segment = AudioSegment.from_file(tts_buf, format="mp3")
        mp3_combined += segment + AudioSegment.silent(duration=int(pause_sec * 1000))
        progress_bar.progress(i / n)

    out_buf = BytesIO()
    mp3_combined.export(out_buf, format="mp3")
    out_buf.seek(0)
    return out_buf

def mp3_generator_block(user, df, pause_sec=0.5):
    """
    Streamlit-–±–ª–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ MP3.
    df - DataFrame –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
    pause_sec - –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏.
    """
    st.subheader("üéß –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä MP3")
    if df is None or df.empty:
        st.info("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
        return

    if st.button("‚ñ∂Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å MP3"):
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è..."):
            mp3_buf = build_merged_mp3(df, pause_sec)
            st.audio(mp3_buf, format="audio/mp3")
            st.download_button("üíæ –°–∫–∞—á–∞—Ç—å MP3", data=mp3_buf, file_name="output.mp3")
