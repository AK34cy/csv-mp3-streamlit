# mp3_generator.py
import streamlit as st
import pandas as pd
from io import BytesIO
from db import get_file
from gtts import gTTS
from pydub import AudioSegment
import time

def build_merged_mp3(df, pause_sec=0.5):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è MP3 –∏–∑ DataFrame —Å –ø–∞—É–∑–æ–π –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫: —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ -> 'ru', –Ω–µ–º–µ—Ü–∫–∏–µ -> 'de'
    """
    mp3_combined = AudioSegment.silent(duration=0)
    total = len(df)
    progress_bar = st.progress(0)
    
    for idx, row in enumerate(df.itertuples(index=False), 1):
        text_parts = [str(x) for x in row if pd.notna(x)]
        if not text_parts:
            continue

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ (—Ä—É—Å—Å–∫–∞—è / –Ω–µ–º–µ—Ü–∫–∞—è)
        audio_segments = []
        for part in text_parts:
            lang = 'de' if any('a' <= c.lower() <= 'z' for c in part) else 'ru'
            tts = gTTS(text=part, lang=lang)
            buf = BytesIO()
            tts.write_to_fp(buf)
            buf.seek(0)
            segment = AudioSegment.from_file(buf, format="mp3")
            audio_segments.append(segment)
            audio_segments.append(AudioSegment.silent(duration=int(pause_sec*1000)))

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã —Å—Ç—Ä–æ–∫–∏
        for seg in audio_segments:
            mp3_combined += seg

        progress_bar.progress(idx / total)

    out_buf = BytesIO()
    mp3_combined.export(out_buf, format="mp3")
    out_buf.seek(0)
    return out_buf

def mp3_generator_block(user, df, pause_sec=0.5):
    """
    Streamlit-–±–ª–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ MP3.
    df —É–∂–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ç—Ä–æ–∫–∏.
    """
    st.subheader("üéß –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä MP3")

    if df.empty:
        st.info("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        return

    if st.button("‚ñ∂Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å MP3"):
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è MP3..."):
            mp3_buf = build_merged_mp3(df, pause_sec=pause_sec)
            st.audio(mp3_buf, format="audio/mp3")
            st.download_button(
                "üíæ –°–∫–∞—á–∞—Ç—å MP3",
                data=mp3_buf,
                file_name="output.mp3"
            )
