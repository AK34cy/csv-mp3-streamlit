# mp3_generator.py
import streamlit as st
import pandas as pd
from io import BytesIO
from gtts import gTTS
from pydub import AudioSegment
from pydub.utils import which as pydub_which
import logging
import traceback
import os
from typing import Optional

logger = logging.getLogger(__name__)


def _ensure_ffmpeg():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ffmpeg –∏ –∑–∞–¥–∞—Ç—å AudioSegment.converter, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω."""
    ffmpeg_path = pydub_which("ffmpeg") or pydub_which("ffmpeg.exe")
    if not ffmpeg_path:
        raise RuntimeError("ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH (–Ω—É–∂–µ–Ω pydub –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å mp3). –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å.")
    # —è–≤–Ω–æ —É–∫–∞–∂–µ–º pydub, —á—Ç–æ–±—ã –æ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±–∏–Ω–∞—Ä–Ω–∏–∫
    AudioSegment.converter = ffmpeg_path
    return ffmpeg_path


def build_merged_mp3(df: pd.DataFrame, pause_sec: float = 0.5, debug_save_path: Optional[str] = None) -> bytes:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è MP3 –∏–∑ DataFrame. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç raw bytes MP3.
    pause_sec ‚Äî –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö).
    debug_save_path ‚Äî –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π mp3 –Ω–∞ –¥–∏—Å–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
    """
    if df is None or df.empty:
        raise ValueError("DataFrame –ø—É—Å—Ç–æ–π")

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º ffmpeg
    _ensure_ffmpeg()

    mp3_combined = AudioSegment.silent(duration=0)

    for row in df.itertuples(index=False):
        # –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ–ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ —Å—Ç—Ä–æ–∫–∏
        text = " ".join(str(x) for x in row if pd.notna(x) and str(x).strip() != "")
        if not text.strip():
            continue
        try:
            tts = gTTS(text=text, lang="ru")
            buf = BytesIO()
            tts.write_to_fp(buf)
            buf.seek(0)
            # pydub –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ffmpeg –¥–ª—è —á—Ç–µ–Ω–∏—è mp3 –∏–∑ –±—É—Ñ–µ—Ä–∞
            segment = AudioSegment.from_file(buf, format="mp3")
            mp3_combined += segment
            # –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏
            if pause_sec and pause_sec > 0:
                mp3_combined += AudioSegment.silent(duration=int(pause_sec * 1000))
        except Exception as e:
            # –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞–≤—à–∏–π –±–ª–æ–∫ –ø–æ–∫–∞–∑–∞–ª –æ—à–∏–±–∫—É
            logger.exception("gTTS/pydub error for text: %s", text)
            raise

    out_buf = BytesIO()
    mp3_combined.export(out_buf, format="mp3")
    mp3_bytes = out_buf.getvalue()

    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫ (—É–¥–æ–±–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
    if debug_save_path:
        try:
            with open(debug_save_path, "wb") as f:
                f.write(mp3_bytes)
            logger.info("Saved debug MP3 to %s", debug_save_path)
        except Exception:
            logger.exception("Failed to save debug mp3 to %s", debug_save_path)

    # –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if not mp3_bytes or len(mp3_bytes) < 2000:
        # —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª ‚Äî —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        raise RuntimeError(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π MP3 ({len(mp3_bytes)} bytes). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ffmpeg/gTTS.")

    return mp3_bytes


def mp3_generator_block(user: dict, df: pd.DataFrame, pause_sec: float, file_name: str = "output"):
    """
    Streamlit-–±–ª–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ MP3 (–≤–∞—Ä–∏–∞–Ω—Ç 2).
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç user, df (DataFrame —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏), pause_sec –∏ file_name (–±–µ–∑ .mp3).
    """
    st.subheader("üéß –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä MP3")

    if df is None or df.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ MP3")
        return

    # –ó–∞—â–∏—Ç–∏–º UI: –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏
    if st.button("‚ñ∂Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å MP3"):
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è..."):
            try:
                # debug_save_path –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–¥–∞—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä "/tmp/out.mp3")
                debug_path = os.environ.get("MP3_DEBUG_SAVE")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞–¥–∞–π—Ç–µ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏
                mp3_bytes = build_merged_mp3(df, pause_sec=pause_sec, debug_save_path=debug_path)

                # –æ—Ç–¥–∞–µ–º –±–∞–π—Ç—ã –ø–ª–µ–µ—Ä—É –∏ –∫–Ω–æ–ø–∫–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                st.audio(mp3_bytes, format="audio/mpeg")  # –∏—Å–ø–æ–ª—å–∑—É–µ–º audio/mpeg
                st.download_button(
                    "üíæ –°–∫–∞—á–∞—Ç—å MP3",
                    data=mp3_bytes,
                    file_name=f"{file_name}.mp3",
                    mime="audio/mpeg"
                )
            except Exception as e:
                # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É –∏ —Å—Ç–µ–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ MP3: {e}")
                st.text_area("–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ç—Ä–µ–π—Å–±–µ–∫ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏):", traceback.format_exc(), height=300)
                logger.exception("mp3 generation failed")
