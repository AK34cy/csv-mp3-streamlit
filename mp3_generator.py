# mp3_generator.py
import streamlit as st
import pandas as pd
from io import BytesIO
from db import get_file
from gtts import gTTS
from pydub import AudioSegment
import re

# –†–µ–≥—É–ª—è—Ä–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
RE_RU = re.compile(r'[–∞-—è–ê-–Ø—ë–Å]')
RE_DE = re.compile(r'[a-zA-Z√§√∂√º√ü√Ñ√ñ√ú]')  # –±–∞–∑–æ–≤—ã–µ –±—É–∫–≤—ã –Ω–µ–º–µ—Ü–∫–æ–≥–æ

def detect_lang(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Å—Ç—Ä–æ–∫–∏: 'ru' –∏–ª–∏ 'de'"""
    if RE_RU.search(text):
        return 'ru'
    elif RE_DE.search(text):
        return 'de'
    return 'ru'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∞—è –æ–∑–≤—É—á–∫–∞

def build_merged_mp3(df: pd.DataFrame, pause_sec: float = 0.5) -> BytesIO:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è MP3 –∏–∑ DataFrame.
    –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ df –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∑–≤—É–∫ —Å –ø–∞—É–∑–æ–π pause_sec –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏.
    –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏.
    """
    mp3_combined = AudioSegment.silent(duration=0)
    for row in df.itertuples(index=False):
        text = " ".join(str(x) for x in row if pd.notna(x))
        lang = detect_lang(text)
        tts = gTTS(text=text, lang=lang)
        buf = BytesIO()
        tts.write_to_fp(buf)
        buf.seek(0)
        segment = AudioSegment.from_file(buf, format="mp3")
        mp3_combined += segment + AudioSegment.silent(duration=int(pause_sec * 1000))
    out_buf = BytesIO()
    mp3_combined.export(out_buf, format="mp3")
    out_buf.seek(0)
    return out_buf

def mp3_generator_block(user, df: pd.DataFrame, pause_sec: float = 0.5):
    """
    Streamlit-–±–ª–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ MP3 —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –∏ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —è–∑—ã–∫–∞.
    """
    st.subheader("üéß –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä MP3")
    if df.empty:
        st.info("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å–ª–µ–≤–∞")
        return

    total_rows = len(df)
    mp3_combined = AudioSegment.silent(duration=0)

    progress_bar = st.progress(0)
    status_text = st.empty()

    for idx, row in enumerate(df.itertuples(index=False), 1):
        text = " ".join(str(x) for x in row if pd.notna(x))
        lang = detect_lang(text)
        tts = gTTS(text=text, lang=lang)
        buf = BytesIO()
        tts.write_to_fp(buf)
        buf.seek(0)
        segment = AudioSegment.from_file(buf, format="mp3")
        mp3_combined += segment + AudioSegment.silent(duration=int(pause_sec * 1000))

        progress_bar.progress(idx / total_rows)
        status_text.text(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è: —Å—Ç—Ä–æ–∫–∞ {idx}/{total_rows}")

    out_buf = BytesIO()
    mp3_combined.export(out_buf, format="mp3")
    out_buf.seek(0)

    st.audio(out_buf, format="audio/mp3")
    st.download_button("üíæ –°–∫–∞—á–∞—Ç—å MP3", data=out_buf, file_name="output.mp3")
    status_text.empty()
    progress_bar.empty()
