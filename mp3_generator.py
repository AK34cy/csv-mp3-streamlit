import streamlit as st
from gtts import gTTS
from pydub import AudioSegment
from io import BytesIO
from tempfile import NamedTemporaryFile
import pandas as pd

def _tts_to_segment(text: str, lang: str) -> AudioSegment:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–µ–≥–º–µ–Ω—Ç AudioSegment —á–µ—Ä–µ–∑ gTTS"""
    buf = BytesIO()
    tts = gTTS(text=text, lang=lang)
    tts.write_to_fp(buf)
    buf.seek(0)
    return AudioSegment.from_file(buf, format="mp3")


def build_merged_mp3(
    rows,
    pause_ms: int = 500,
    ru_col: int = 0,
    ru_lang: str = "ru",
    de_lang: str = "de",
    progress_callback=None
):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è MP3 –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫.
    rows ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ (—Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞)
    pause_ms ‚Äî –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Ä—É—Å—Å–∫–∏–º —Å–ª–æ–≤–æ–º (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ)
    """
    track = AudioSegment.silent(duration=0)
    total = len(rows)
    first_ru_done = False

    for idx, row in enumerate(rows):
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Å—Ç—Ä–æ–∫–∞–º –∏ —Ñ–∏–ª—å—Ç—Ä –ø—É—Å—Ç—ã—Ö
        cells = [str(c).strip() for c in row if c and str(c).strip().lower() not in ("nan", "none")]
        if not cells:
            if progress_callback:
                progress_callback(idx)
            continue

        # –†—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ
        if 0 <= ru_col < len(cells):
            if first_ru_done:
                track += AudioSegment.silent(duration=pause_ms)
            try:
                track += _tts_to_segment(cells[ru_col], ru_lang)
            except Exception as e:
                print(f"[WARN] gTTS RU failed for '{cells[ru_col]}': {e}")
            first_ru_done = True

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ (–Ω–µ–º–µ—Ü–∫–∏–µ)
        for j, text in enumerate(cells):
            if j == ru_col:
                continue
            try:
                track += _tts_to_segment(text, de_lang)
            except Exception as e:
                print(f"[WARN] gTTS DE failed for '{text}': {e}")

        if progress_callback:
            progress_callback(idx + 1)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ Streamlit
    out_buf = BytesIO()
    track.export(out_buf, format="mp3", bitrate="128k")
    out_buf.seek(0)
    return out_buf


def mp3_generator_block(user, rows, pause_ms=500):
    """
    Streamlit-–±–ª–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ MP3.
    rows ‚Äî —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.
    """
    st.subheader("üéß –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä MP3")

    if not rows:
        st.info("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ —Å–ª–µ–≤–∞")
        return

    progress_bar = st.progress(0)
    status_text = st.empty()

    def progress_callback(idx):
        progress = int((idx / len(rows)) * 100)
        progress_bar.progress(progress)
        status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {idx}/{len(rows)} —Å—Ç—Ä–æ–∫")

    if st.button("‚ñ∂Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å MP3"):
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è MP3..."):
            mp3_buf = build_merged_mp3(rows, pause_ms=int(pause_ms * 1000), progress_callback=progress_callback)
            progress_bar.progress(100)
            status_text.text(f"–ì–æ—Ç–æ–≤–æ! –í—Å–µ–≥–æ {len(rows)} —Å—Ç—Ä–æ–∫")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            with NamedTemporaryFile(delete=False, suffix=".mp3") as tmp:
                tmp.write(mp3_buf.read())
                tmp_path = tmp.name

            st.audio(tmp_path, format="audio/mp3")

            with open(tmp_path, "rb") as f:
                st.download_button("üíæ –°–∫–∞—á–∞—Ç—å MP3", data=f, file_name="output.mp3")
