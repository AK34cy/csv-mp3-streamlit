# mp3_generator.py
import streamlit as st
import pandas as pd
from io import BytesIO
from gtts import gTTS
from pydub import AudioSegment

def build_merged_mp3(df, pause_sec=0.5):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è MP3 –∏–∑ DataFrame.
    –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ df –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Ä–µ—á—å, –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏ = pause_sec —Å–µ–∫—É–Ω–¥.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç—ã MP3.
    """
    mp3_combined = AudioSegment.silent(duration=0)

    for row in df.itertuples(index=False):
        text = " ".join(str(x) for x in row if pd.notna(x))
        if not text.strip():
            continue
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏
        tts = gTTS(text=text, lang="ru")
        buf = BytesIO()
        tts.write_to_fp(buf)
        buf.seek(0)
        segment = AudioSegment.from_file(buf, format="mp3")
        mp3_combined += segment + AudioSegment.silent(duration=int(pause_sec * 1000))

    # –≠–∫—Å–ø–æ—Ä—Ç –≤ –ø–∞–º—è—Ç—å
    out_buf = BytesIO()
    mp3_combined.export(out_buf, format="mp3")
    return out_buf.getvalue()


def mp3_generator_block(user, df, pause_sec=0.5, file_name="output"):
    """
    Streamlit-–±–ª–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ MP3.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç:
      - user: dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      - df: DataFrame —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
      - pause_sec: –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏
      - file_name: –∏–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
    """
    st.subheader("üéß –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä MP3")

    if st.button("‚ñ∂Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å MP3"):
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è..."):
            mp3_bytes = build_merged_mp3(df, pause_sec=pause_sec)
            st.audio(mp3_bytes, format="audio/mp3")
            st.download_button(
                "üíæ –°–∫–∞—á–∞—Ç—å MP3",
                data=mp3_bytes,
                file_name=f"{file_name}.mp3",
                mime="audio/mp3"
            )
