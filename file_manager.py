# file_manager.py
import streamlit as st
import pandas as pd
import re
from db import store_file, list_user_files, get_file
from config import LANGUAGES  # —Å–ª–æ–≤–∞—Ä—å —è–∑—ã–∫–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä {"–ù–µ–º–µ—Ü–∫–∏–π": "de", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": "en", "–ì—Ä–µ—á–µ—Å–∫–∏–π": "el"}

def is_valid_row(row):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    ru_cell = str(row[0]).strip()
    if not re.search(r'\w', ru_cell):  # –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã
        return False
    translation_cells = row[1:]
    if not any(re.search(r'\w', str(c).strip()) for c in translation_cells):
        return False
    return True

def file_manager_block(user):
    st.subheader("üìÇ –í–∞—à–∏ —Ñ–∞–π–ª—ã")

    uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)", type="csv")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ ---
    if uploaded:
        if "uploaded_file_processed" not in st.session_state or st.session_state.uploaded_file_processed != uploaded.name:
            try:
                # –ß—Ç–µ–Ω–∏–µ CSV
                df = pd.read_csv(uploaded, header=None, dtype=str, keep_default_na=False)
                
                # --- –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –º–∏–Ω–∏–º—É–º 2 –∑–Ω–∞—á–∏–º—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ ---
                df = df[df.apply(is_valid_row, axis=1)].reset_index(drop=True)

                if df.empty:
                    st.warning("–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫ —Å –º–∏–Ω–∏–º—É–º 2 –∑–Ω–∞—á–∏–º—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.")
                else:
                    # --- –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ ---
                    selected_lang_name = st.selectbox(
                        "–Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞",
                        options=list(LANGUAGES.keys()),
                        index=0
                    )
                    selected_lang = LANGUAGES[selected_lang_name]

                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —è–∑—ã–∫–∞
                    store_file(
                        st.session_state.conn,
                        user["id"],
                        uploaded.name,
                        uploaded.getvalue(),
                        kind="csv",
                        target_lang=selected_lang
                    )

                    st.success(f"–§–∞–π–ª '{uploaded.name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î (—è–∑—ã–∫: {selected_lang_name})")
                    st.session_state.uploaded_file_processed = uploaded.name
                    st.experimental_rerun()
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

    # --- –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ë–î ---
    files = list_user_files(st.session_state.conn, user["id"], kind="csv")
    if files:
        for f in files:
            st.write(f"{f['filename']} ({f['created_at']})")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("–û—Ç–∫—Ä—ã—Ç—å", key=f"open_{f['id']}"):
                    st.session_state.current_file_id = f['id']
                    st.experimental_rerun()
            with col2:
                if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"del_{f['id']}"):
                    st.session_state.conn.cursor().execute(
                        "DELETE FROM user_files WHERE id=%s AND user_id=%s", 
                        (f['id'], user["id"])
                    )
                    st.success(f"–§–∞–π–ª '{f['filename']}' —É–¥–∞–ª—ë–Ω")
                    st.experimental_rerun()
    else:
        st.info("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö CSV")
